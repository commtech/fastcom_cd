Installation instructions for Commtech's Fastcom:FSCC
Synchronous RS-422/485 PCI Serial Adapter

1.0 Getting the latest software

1.1 Download latest Fastcom:FSCC software package: 
    http://www.commtech-fastcom.com/CommtechSoftware.html

1.1 Uncompress the archive 

	$unzip fsccp_ddmmmyyyy.zip

    This creates a fsccp directory that contains all the software 
    for the card, including Micro$oft operating systems.  As a nifty linux
    developer, all you need is the linux tarball.

	$cp fsccp/linux/fsccp_mm_dd_yyyy.tar.gz .
	$rm fsccp_ddmmmyyyy.zip
	$rm -rf fsccp
	$tar -xzf fsccp_mm_dd_yyyy.tar.gz

    Now you have an fsccp directory.  For the rest of this procedure, I am 
    just going to assume that this is in the root directory, /fsccp.  You
    can put it wherever you like.

2.0 Build and install the driver

2.1 For 2.4.x kernels

    You must have the kernel source tree for your specific kernel version
    installed.  To verify, you can look in /usr/src for a directory 
    linux 2.4.xxxxx, if you do not have this, you will need to install your
    kernel's source package.

    You will need to create a symbolic link in your source tree.  Change the
    xxxxx to match your installed source version.  Right now, mine is
    linux-2.4.20-8.

	$cd /usr/src
	$ln -s linux-xxxxx linux

    To build the FSCCP kernel module (fsccp.o) run:

	$make -f Makefile_2.4

    Then you can run this script to create the devnodes /dev/fscc0 - fscc5
    and insmod the driver.  You only need to run this once.  It will copy 
    the module to the correct location  (hopefully) /lib/modules/xxx/char, 
    but you must manually add the insmod or depmod line to an install script 
    to get the driver to load a boot.  Or you can just 'insmod fsccp.o' 
    prior to device usage.
    NOTE: If depmod gives you errors, check the depmod section below.

	$./mkdev_2.4.sh

    Then you can build all of the example/utility programs from the utils 
    directory.  The executables will be placed in the utils/bin directory.

	$make -f Makefile_2.4 tools

    See the README file for setting up and testing the card.


2.2 For 2.6.x kernels

    We have two options for building the module.  Of course the "best" method
    is to recompile a new kernel turning on exactly what you want and then 
    build the FSCC's module for that kernel.  Or you can take the easy way out 
    and compile the module for use in a pre-built kernel.

    For those of you who are OK with compiling your own kernel, go for it.

    For those of you who do not want to rebuild a kernel, read on.

2.2.1 Compiling module for a pre-built kernel

    To build the module, you can simply run

	$cd /fsccp
	$make

    NOTE: If $make fails, you may need to install the kernel source.  It is
    looking for the kernel headers in /lib/modules/kernelnumber/build, if it
    is not there, then you will have to do something different.  On Mandrake,
    simply installing the kernel source puts the build directory there.  On
    another platform, you may need to install the source to 
    /usr/src/linux-2.6... and modify the KDIR line of the makefile to be the
    path to the newly installed source /usr/src/linux-2.6...

    Then you can run this script to create the devnodes /dev/fscc0 - fscc5
    and insmod the driver.  You only need to run this once.  It will copy 
    the module to the correct location  
    (hopefully) /lib/modules/xxx/kernel/drivers/char, but you must manually 
    add the insmod or depmod line to an install script to get the driver to 
    load a boot.  Or you can just 'insmod fsccp.ko' prior to device usage.

    NOTE: If depmod gives you errors, check the depmod section below.

	$./mkdev.sh

    Then you can build all of the example/utility programs from the utils 
    directory.  The executables will be placed in the utils/bin directory.

	$make tools

    See the README file for setting up and testing the card.


2.3 Depmod errors

    If depmod generates a error such as:

    depmod: *** Unresolved symbols in /lib/modules/2.4.20-8/kernel/char/fsccp.o
     
    and 'depmod -e' returns something like
    depmod: *** Unresolved symbols in /lib/modules/2.4.20-8/kernel/char/fsccp.o
    depmod: 	securebits
    depmod: 	__wake_up
    depmod: 	__generic_copy_from_user
    depmod: 	__release_region
    depmod: 	kmalloc
    depmod: 	unregister_chrdev
    depmod: 	register_chrdev
    depmod: 	__check_region
    depmod: 	create_proc_entry
    depmod: 	vfree
    depmod: 	pcibios_present
    depmod: 	free_irq
    depmod: 	interruptible_sleep_on
    depmod: 	__pollwait
    depmod: 	kfree
    depmod: 	remove_proc_entry
    depmod: 	request_irq
    depmod: 	pci_find_device
    depmod: 	sprintf
    depmod: 	jiffies
    depmod: 	__vmalloc
    depmod: 	__request_region
    depmod: 	printk
    depmod: 	add_timer
    depmod: 	__const_udelay
    depmod: 	ioport_resource
    depmod: 	__generic_copy_to_user

    Then edit the Makefile and comment the current DEPENDFLAGS line, and 
    uncomment the modversions defined DEPENDFLAGS line.  Run :

	2.4 kernels
	$ make -f Makefile_2.4 clean
	$ make -f Makefile_2.4

	2.6 kernels
	$make clean
	$make 

    Then copy the new fsccp.o or fsccp.ko file to the correct location and 
    try again.

